interface Uri {
  constructor([ByRef] string uri);

  [Throws=Error]
  Uri from_string([ByRef] string uri);
};

interface FFIInvoker {
  [Throws=Error]
  sequence<u8> invoke_raw(Uri uri, [ByRef] string method, sequence<u8>? args, string? env);

  [Throws=Error]
  sequence<Uri> get_implementations(Uri uri);

  [Throws=Error]
  record<DOMString, sequence<Uri>> get_interfaces();
};

interface FFIWrapper {
  [Throws=Error]
  sequence<u8> invoke_raw(FFIInvoker invoker, Uri uri, [ByRef] string method, sequence<u8>? args, string? env);
};

interface FFIWrapPackage { };

interface FFILoader {
  string? get_env_by_uri(Uri uri);
  
  [Throws=Error]
  FFIWrapper load_wrapper(Uri uri);
};

interface FFIWasmWrapper {
  constructor(sequence<u8> wasm_module);
};

callback interface FFIPluginModule {
  sequence<u8> wrap_invoke([ByRef] string method_name, [ByRef] sequence<u8> params, string? env, FFIInvoker invoker);
};

interface FFIPluginWrapper {
  constructor(FFIPluginModule plugin_module);
};

callback interface FFIUriResolver {
  FFIUriPackageOrWrapper _try_resolve_uri(Uri uri, FFILoader loader);
};

[Enum]
interface FFIUriPackageOrWrapper {
  Uri(Uri uri);
  Wrapper(Uri uri, FFIWrapper wrapper);
  Package(Uri uri, FFIWrapPackage package);
};

[Enum]
interface FFIUriResolverLike {
  Resolver(FFIUriResolver resolver);
  Redirect(Uri from, Uri to);
  Package(Uri uri, FFIWrapPackage package);
  Wrapper(Uri uri, FFIWrapper wrapper);
  ResolverLike(sequence<FFIUriResolverLike> resolvers);
};

interface FFIStaticUriResolver {
  constructor(record<DOMString, FFIUriPackageOrWrapper> uri_map);
};

interface FFIExtendableUriResolver {
  constructor(string? name);
};

interface FFIRecursiveUriResolver {
  constructor(FFIUriResolverLike uri_resolver_like);
};

interface FFIClient {
  [Throws=Error]
  sequence<u8> invoke_raw(Uri uri, [ByRef] string method, sequence<u8>? args, string? env);

  [Throws=Error]
  sequence<Uri> get_implementations(Uri uri);

  [Throws=Error]
  record<DOMString, sequence<Uri>> get_interfaces();

  string? get_env_by_uri(Uri uri);
  
  [Throws=Error]
  FFIWrapper load_wrapper(Uri uri);
};

interface BuilderConfig {
  constructor();
  void add_env(Uri uri, [ByRef] string env);
  void remove_env(Uri uri);
  void set_env(Uri uri, [ByRef] string env);
  void add_interface_implementation(Uri interface_uri, Uri implementation_uri);
  void remove_interface_implementation(Uri interface_uri, Uri implementation_uri);
  void add_wasm_wrapper(Uri uri, FFIWasmWrapper wrapper);
  void add_plugin_wrapper(Uri uri, FFIPluginWrapper wrapper);
  void remove_wrapper(Uri uri);
  void add_redirect(Uri from, Uri to);
  void remove_redirect(Uri from);
  void add_resolver(UriResolver resolver);
  void add_static_resolver(FFIStaticUriResolver resolver);
  void add_extendable_resolver(FFIExtendableUriResolver resolver);
  void add_recursive_resolver(FFIRecursiveUriResolver resolver);
  FFIClient build();
};

namespace main { };