[Error]
enum Error {
  "UriParseError",
  "RedirectsError",
  "WrapperError",
  "WrapperCreateError",
  "InvokeError",
  "LoadWrapperError",
  "WasmWrapperError",
  "ResolutionError",
  "MsgpackError",
  "ManifestError",
  "FileReadError",
  "ResolverError",
  "PluginError",
  "RuntimeError"
};

interface FFIUri {
  constructor([ByRef] string authority, [ByRef] string path, [ByRef] string uri);

  [Name=from_string]
  constructor([ByRef] string uri);

  string to_string();
};

interface FFIInvoker {
  [Throws=Error]
  sequence<u8> invoke_raw(FFIUri uri, [ByRef] string method, sequence<u8>? args, sequence<u8>? env);

  [Throws=Error]
  sequence<FFIUri> get_implementations(FFIUri uri);

  record<DOMString, sequence<FFIUri>>? get_interfaces();
};

callback interface FFIAbortHandler {
  void abort(string msg);
};

callback interface FFIWrapper {
  sequence<u8> invoke([ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIInvoker invoker, FFIAbortHandler? abort_handler);
};

callback interface FFIWrapPackage {
  FFIWrapper create_wrapper();
};

interface FFIWasmWrapper {
  constructor(sequence<u8> wasm_module);

  [Throws=Error]
  sequence<u8> invoke([ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIInvoker invoker, FFIAbortHandler? abort_handler);
};

callback interface FFIUriResolver {
  FFIUriPackageOrWrapper wrap_try_resolve_uri(FFIUri uri, FFIInvoker invoker);
};

enum FFIUriPackageOrWrapperKind {
  "URI",
  "PACKAGE",
  "WRAPPER",
};

callback interface FFIUriWrapper {
  FFIUri get_uri();
  FFIWrapper get_wrapper();
};

callback interface FFIUriWrapPackage {
  FFIUri get_uri();
  FFIWrapPackage get_package();
};

callback interface FFIUriPackageOrWrapper {
  FFIUriPackageOrWrapperKind get_kind();
  FFIUri as_uri();
  FFIUriWrapper as_wrapper();
  FFIUriWrapPackage as_package();
};

interface FFIUriResolverLikeRedirectVariant {
  constructor(FFIUri from, FFIUri to);
};

interface FFIUriResolverLikePackageVariant {
  constructor(FFIUri uri, FFIWrapPackage package);
};

interface FFIUriResolverLikeWrapperVariant {
  constructor(FFIUri uri, FFIWrapper wrapper);
};

interface FFIUriResolverLikeResolverVariant {
  constructor(FFIUriResolver resolver);
};

interface FFIUriResolverLikeResolverLikeVariant {
  constructor(sequence<FFIUriResolverLike> resolver_like);
};

interface FFIUriResolverLike {
  [Name=new_resolver]
  constructor(FFIUriResolverLikeResolverVariant resolver);
  [Name=new_redirect]
  constructor(FFIUriResolverLikeRedirectVariant redirect);
  [Name=new_wrapper]
  constructor(FFIUriResolverLikeWrapperVariant wrapper);
  [Name=new_package]
  constructor(FFIUriResolverLikePackageVariant package);
  [Name=new_resolver_like]
  constructor(FFIUriResolverLikeResolverLikeVariant resolver_like);
  FFIUriResolverLikeKind get_kind();
  FFIUriResolverLikeResolverVariant? get_resolver();
  FFIUriResolverLikeRedirectVariant? get_redirect();
  FFIUriResolverLikeWrapperVariant? get_wrapper();
  FFIUriResolverLikePackageVariant? get_package();
  FFIUriResolverLikeResolverLikeVariant? get_resolver_like();
};

enum FFIUriResolverLikeKind {
  "_Resolver",
  "_Redirect",
  "_Package",
  "_Wrapper",
  "_ResolverLike",
};

interface FFIStaticUriResolver {
  constructor(record<DOMString, FFIUriPackageOrWrapper> uri_map);
};

interface FFIExtendableUriResolver {
  constructor(string? name);
};

interface FFIRecursiveUriResolver {
  constructor(FFIUriResolverLike uri_resolver_like);
};

interface FFIClient {
  [Throws=Error]
  sequence<u8> invoke_raw(FFIUri uri, [ByRef] string method, sequence<u8>? args, sequence<u8>? env);

  [Throws=Error]
  sequence<FFIUri> get_implementations(FFIUri uri);

  record<DOMString, sequence<FFIUri>>? get_interfaces();

  sequence<u8>? get_env_by_uri(FFIUri uri);
};

interface FFIBuilderConfig {
  constructor();
  void add_env(FFIUri uri, sequence<u8> env);
  void remove_env(FFIUri uri);
  void set_env(FFIUri uri, sequence<u8> env);
  void add_interface_implementation(FFIUri interface_uri, FFIUri implementation_uri);
  void remove_interface_implementation(FFIUri interface_uri, FFIUri implementation_uri);
  void add_wrapper(FFIUri uri, FFIWrapper wrapper);
  void remove_wrapper(FFIUri uri);
  void add_redirect(FFIUri from, FFIUri to);
  void remove_redirect(FFIUri from);
  void add_resolver(FFIUriResolver resolver);
  void add_static_resolver(FFIStaticUriResolver resolver);
  void add_extendable_resolver(FFIExtendableUriResolver resolver);
  void add_recursive_resolver(FFIRecursiveUriResolver resolver);
  FFIClient build();
};

namespace main { };